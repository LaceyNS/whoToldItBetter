{"version":3,"sources":["Landing.js","DisplayingData.js","App.js","serviceWorker.js","index.js"],"names":["Landing","className","to","Component","DisplayingData","movieCall","userQuery","axios","url","method","responseType","params","api_key","query","then","response","console","log","data","results","setState","movieArray","movieCallTwo","state","listSelectId","selectedMovieInfo","axiosBookCall","userQ","dataType","paramsSerializer","Qs","stringify","arrayFormat","reqUrl","key","q","xmlToJSON","res","JSON","parse","convert","xml2json","compact","spaces","GoodreadsResponse","search","work","map","book","best_book","title","_text","image_url","original_publication_year","average_rating","catch","handleFormSubmit","event","preventDefault","userInput","selected","handleFormChange","target","value","handleOptionChange","changeEvent","handleTitleOption","selectedTitle","id","selectedId","listSelectTitle","Array","bookInfo","onSubmit","this","htmlFor","type","checked","name","onChange","placeholder","aria-label","movie","onClick","src","poster_path","alt","App","basename","process","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.40e7a62d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { NavLink} from \"react-router-dom\";\n\n\nclass Landing extends Component { \nrender(){\n  return(\n    <header>\n      <h1> Who told it better?</h1>\n      <div className=\"breakLine\"></div>\n      <p>The movie or the book?</p>\n      <NavLink to=\"/data\">\n        <button>continue</button>\n      </NavLink>\n      \n    </header>\n  )\n}\n\n}\n\nexport default Landing;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Qs from \"qs\";\nimport convert from 'xml-js'\n\n\nclass DisplayingData extends Component {\n  constructor() {\n    super();\n    this.state = {\n      Array: [],\n      userInput: \"\",\n      bookInfo: [],\n      selected: \"movie\",\n      movieArray: [],\n      listSelectTitle: \"\",\n      listSelectId: \"\",\n      selectedMovieInfo: {}\n    }\n  }\n\n  // axios call to TMDB\n  movieCall = (userQuery) => {\n    axios({\n      url: `https://api.themoviedb.org/3/search/movie`,\n      method: `GET`,\n      responseType: `json`,\n      params: {\n        api_key: `4f70306aa4e939e1535c12686b6403c7`,\n        query: userQuery\n      }\n    }).then((response) => {\n      console.log(response.data.results)\n      this.setState({\n        movieArray: response.data.results\n      })\n    })\n  }\n  \n  movieCallTwo = () => {\n    console.log(this.state.listSelectId)\n    axios({\n      url: `https://api.themoviedb.org/3/movie/${this.state.listSelectId}`,\n      method: `GET`,\n      responseType: `json`,\n      params: {\n        api_key: `4f70306aa4e939e1535c12686b6403c7`,\n      }\n    }).then((response) => {\n      console.log(response.data)\n      this.setState({\n        selectedMovieInfo: response.data\n      })\n    })\n  }\n\n  // axios call to Goodreads\n  axiosBookCall = (userQ) => {\n    axios({\n      method: \"GET\",\n      url: \"http://proxy.hackeryou.com\",\n      dataType: \"json\",\n      paramsSerializer: function (params) {\n        return Qs.stringify(params, { arrayFormat: \"brackets\" });\n      },\n      params: {\n        reqUrl: `https://www.goodreads.com/search.xml`,\n        params: {\n          key: `PPD00ZRT7jL7X8jXfJmmQ`,\n          q: userQ,\n        },\n      },\n      xmlToJSON: true,\n    })\n      .then((res) => {\n        const toJson = JSON.parse(convert.xml2json(res.data, {compact: true,spaces: 4,}));\n        // console.log(toJson.GoodreadsResponse.search.results.work[0].best_book.title)\n        const booksResult = toJson.GoodreadsResponse.search.results.work;\n\n        booksResult.map((book)=>{\n          // console.log(book)\n          console.log(\"title\",book.best_book.title._text)\n          console.log(\"image\",book.best_book.image_url._text);\n          console.log(\"publication year\", book.original_publication_year._text)\n          console.log(\"rating\", book.average_rating._text)\n        })\n\n      })\n      .catch((res) => {\n        console.log(res);\n      });\n  }\n\n  // for when form submits, pass userInput through to axios\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    if (this.state.userInput !== '' && this.state.selected === \"movie\") {\n      this.movieCall(this.state.userInput)\n    } else if (this.state.userInput !== '' && this.state.selected === \"book\") {\n      //console.log(\"book API call!\")\n      this.axiosBookCall(this.state.userInput)\n    }\n  }\n\n\n  // Grabs user input, which is then used by handleFormSubmit\n  handleFormChange = (event) => {\n    this.setState({\n      userInput: event.target.value\n    })\n  }\n\n\n  // Changes the state for the radio buttons in the form\n  handleOptionChange = changeEvent => {\n    this.setState({\n      selected: changeEvent.target.value\n    });\n  };\n\n  handleTitleOption = (event) => {\n    console.log(event.target.value)\n    const selectedTitle = event.target.id\n    const selectedId = event.target.value\n    console.log(event.target.id)\n    this.setState({\n      listSelectTitle: selectedTitle,\n      listSelectId: selectedId\n    }, this.movieCallTwo )\n  \n  }\n\n  render() {\n    return (\n         <div className=\"App\">\n              <h1>Who Told It Better</h1>\n              <form onSubmit={this.handleFormSubmit}>\n                   <label htmlFor=\"movie\">Movie</label>\n                   <input\n                        type=\"radio\"\n                        checked={this.state.selected === \"movie\"}\n                        name=\"mediaChoice\"\n                        value=\"movie\"\n                        id=\"movie\"\n                        className=\"radioButtons\"\n                        onChange={this.handleOptionChange}\n                   />\n                   <label htmlFor=\"book\">Book</label>\n                   <input\n                        type=\"radio\"\n                        checked={this.state.selected === \"book\"}\n                        name=\"mediaChoice\"\n                        value=\"book\"\n                        id=\"book\"\n                        className=\"radioButtons\"\n                        onChange={this.handleOptionChange}\n                   />\n                   <input\n                        type=\"text\"\n                        value={this.state.userInput}\n                        onChange={this.handleFormChange}\n                        placeholder=\"Search\"\n                   />\n                   <button type=\"submit\" aria-label=\"Search\">\n                        {\" \"}\n                        Search{\" \"}\n                   </button>\n              </form>\n\n              {/* WORK IN PROGRESS */}\n              <div>\n                   <ul>\n                        {this.state.selected === \"movie\" ? (\n                             <>\n                                  {this.state.movieArray.map((movie) => {\n                                       return (\n                                            <li\n                                                 key={movie.id}\n                                                 onClick={\n                                                      this.handleTitleOption\n                                                 }\n                                                 id={movie.title}\n                                                 value={movie.id}\n                                            >\n                                                 {movie.title}\n                                            </li>\n                                       );\n                                  })}\n                             </>\n                        ) : (\n                             <li>Book query array goes here</li>\n                        )}\n                   </ul>\n              </div>\n\n              <ul>\n                   <li>\n                        <h2>{this.state.selectedMovieInfo.title}</h2>\n                        <div>\n                             <img\n                                  src={`http://image.tmdb.org/t/p/w500/${this.state.selectedMovieInfo.poster_path}`}\n                                  alt={`Movie Poster of ${this.state.selectedMovieInfo.title}`}\n                             />\n                        </div>\n                        <p>Winner?</p>\n                   </li>\n\n                   <li>\n                        <h2>Book</h2>\n                        <div>\n                             <img src=\"\" alt=\"\" />\n                        </div>\n                        <p>Loser?</p>\n                   </li>\n              </ul>\n\n              {/* WORK IN PROGRESS */}\n         </div>\n    );\n  }\n}\n\nexport default DisplayingData;\n\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Landing from './Landing'\nimport DisplayingData from './DisplayingData'\nimport {BrowserRouter as Router, Route } from \"react-router-dom\";\n\n\nclass App extends Component {\n\n\n  render(){\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n          <Route path=\"/data\" component={DisplayingData} />\n          <Route exact path=\"/\" component={Landing} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './App.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}