{"version":3,"sources":["Landing.js","DisplayingData.js","App.js","serviceWorker.js","index.js"],"names":["Landing","className","to","Component","DisplayingData","movieCall","userQuery","axios","url","method","responseType","params","api_key","query","then","response","console","log","data","results","setState","movieArray","movieCallTwo","id","selectedMovieInfo","axiosBookCall","userQ","dataType","paramsSerializer","Qs","stringify","arrayFormat","reqUrl","key","q","xmlToJSON","res","booksResult","JSON","parse","convert","xml2json","compact","spaces","GoodreadsResponse","search","work","bookArray","catch","handleFormSubmit","event","preventDefault","state","userInput","handleFormChange","target","value","handleTitleOption","attributes","movieInfo","title","image","rating","selectedTitle","selectedId","secondCall","handleTitleBookOption","bookInfo","Array","selected","onSubmit","this","type","onChange","placeholder","aria-label","slice","map","movie","onClick","data-title","data-id","data-poster","poster_path","data-rating","vote_average","aria-labelledby","book","_text","best_book","data-value","text","data-image","image_url","average_rating","src","alt","App","basename","process","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.f98a13c4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { NavLink} from \"react-router-dom\";\n\n\nclass Landing extends Component { \nrender(){\n  return(\n    <header>\n      <div className=\"hContainer \n      wrapper\">\n        <h1> Who told it better?</h1>\n        <div className=\"lineWSubtitle\">\n          <div className=\"breakLine\"></div>\n          <p>The movie or the book?</p>\n        </div>\n        <NavLink to=\"/data\" className=\"hButton\">\n          <button>continue</button>\n        </NavLink>\n      </div>\n    </header>\n  )\n}\n\n}\n\nexport default Landing;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Qs from \"qs\";\nimport convert from 'xml-js'\n\n\nclass DisplayingData extends Component {\n  constructor() {\n    super();\n    this.state = {\n      Array: [],\n      userInput: \"\",\n      selected: \"movie\",\n      movieArray: [],\n      selectedMovieInfo: {},\n      bookArray: [],\n      bookInfo: {},\n      movieInfo: {}\n    };\n  }\n\n  // axios call to TMDB\n  movieCall = (userQuery) => {\n    axios({\n      url: `https://api.themoviedb.org/3/search/movie`,\n      method: `GET`,\n      responseType: `json`,\n      params: {\n        api_key: `4f70306aa4e939e1535c12686b6403c7`,\n        query: userQuery,\n      },\n    }).then((response) => {\n      console.log(response.data.results)\n      this.setState({\n        movieArray: response.data.results,\n      });\n    });\n  };\n\n  movieCallTwo = (id) => {\n    axios({\n      url: `https://api.themoviedb.org/3/movie/${id}`,\n      method: `GET`,\n      responseType: `json`,\n      params: {\n        api_key: `4f70306aa4e939e1535c12686b6403c7`,\n      },\n    }).then((response) => {\n      this.setState({\n        selectedMovieInfo: response.data,\n      });\n    });\n  };\n\n  // axios call to Goodreads\n  axiosBookCall = (userQ) => {\n    axios({\n      method: \"GET\",\n      url: \"http://proxy.hackeryou.com\",\n      dataType: \"json\",\n      paramsSerializer: function (params) {\n        return Qs.stringify(params, { arrayFormat: \"brackets\" });\n      },\n      params: {\n        reqUrl: `https://www.goodreads.com/search.xml`,\n        params: {\n          key: `PPD00ZRT7jL7X8jXfJmmQ`,\n          q: userQ,\n        },\n      },\n      xmlToJSON: true,\n    })\n      .then((res) => {\n        const toJson = JSON.parse(\n          convert.xml2json(res.data, { compact: true, spaces: 4 })\n        );\n        const booksResult = toJson.GoodreadsResponse.search.results.work;\n        return this.setState({\n          bookArray: booksResult,\n        });\n      })\n      .catch((res) => {\n        console.log(\"no book response\");\n      });\n  };\n\n  // for when form submits, pass userInput through to axios\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    if (this.state.userInput !== \"\") {\n      this.movieCall(this.state.userInput);\n      this.axiosBookCall(this.state.userInput);\n    } else {\n      console.log('This didnt work')\n    }\n  };\n\n  // Grabs user input, which is then used by handleFormSubmit\n  handleFormChange = (event) => {\n    this.setState({\n      userInput: event.target.value,\n    });\n  };\n\n  handleTitleOption = (event) => {\n    console.log(event.target.attributes)\n    this.setState({\n      movieInfo: {\n        title: event.target.attributes[0].value,\n        id: event.target.attributes[1].value,\n        image: event.target.attributes[2].value,\n        rating: event.target.attributes[3].value\n      }\n    })\n    const selectedTitle = event.target.attributes[0].value;\n    const selectedId = event.target.value;\n    this.secondCall(selectedTitle, selectedId);\n  };\n\n  handleTitleBookOption =(event) => {\n    this.setState({\n      bookInfo: {\n        title: event.target.attributes[0].value,\n        image: event.target.attributes[1].value, \n        rating: event.target.attributes[2].value\n      }\n    })\n  }\n\n  secondCall = (title, id) => {\n    this.movieCallTwo(id);\n  };\n\n  render() {\n    return (\n         <main>\n              <div className=\"mContainer\">\n                   <div className=\"mTitles\">\n                        <h1>Who Told It Better</h1>\n                        <div className=\"breakLine\"></div>\n                   </div>\n\n                   <p>\n                        Please input your selected title. You'll be presented\n                        with two lists. Please select the matching titles from\n                        each lists.\n                   </p>\n\n                   <form onSubmit={this.handleFormSubmit}>\n                        <input\n                             type=\"text\"\n                             value={this.state.userInput}\n                             onChange={this.handleFormChange}\n                             placeholder=\"Title\"\n                        />\n                        <button\n                             type=\"submit\"\n                             aria-label=\"Search\"\n                             className=\"mButton\"\n                        >\n                             Search\n                        </button>\n                   </form>\n\n                   <ul className=\"movieUl\">\n                        <h3 id=\"movieList\">Movie List</h3>\n                        {this.state.movieArray.slice([0], [5]).map((movie) => {\n                             return (\n                                  <li key={movie.id} className=\"movieLi\">\n                                       <button\n                                            onClick={this.handleTitleOption}\n                                            value={movie.id}\n                                            data-title={movie.title}\n                                            data-id={movie.id}\n                                            data-poster={movie.poster_path}\n                                            data-rating={movie.vote_average}\n                                            aria-labelledby=\"movieList\"\n                                       >\n                                            {movie.title}\n                                       </button>\n                                  </li>\n                             );\n                        })}\n                        ;\n                   </ul>\n\n                   <ul className=\"bookUl\">\n                        <h3 id=\"bookList\">Book List</h3>\n                        {this.state.bookArray.slice([0], [5]).map((book) => {\n                             return (\n                                  <li key={book.id._text} className=\"bookLi\">\n                                       <button\n                                            onClick={this.handleTitleBookOption}\n                                            data-title={\n                                                 book.best_book.title._text\n                                            }\n                                            data-value={\n                                                 book.best_book.title.text\n                                            }\n                                            data-image={\n                                                 book.best_book.image_url._text\n                                            }\n                                            data-rating={\n                                                 book.average_rating._text\n                                            }\n                                            aria-labelledby=\"bookList\"\n                                       >\n                                            {book.best_book.title._text}\n                                       </button>\n                                  </li>\n                             );\n                        })}\n                   </ul>\n\n                   <div className=\"moviePoster\">\n                        <h2>{this.state.selectedMovieInfo.title}</h2>\n                        <div className=\"imgContainer\">\n                             <img\n                                  src={`http://image.tmdb.org/t/p/w500/${this.state.selectedMovieInfo.poster_path}`}\n                                  alt={`Movie Poster of ${this.state.selectedMovieInfo.title}`}\n                             />\n                        </div>\n                        <p>Rating: </p>\n                   </div>\n\n                   <div className=\"bookCover\">\n                        <h2>{this.state.bookInfo.title}</h2>\n                        <div className=\"imgContainer\">\n                             <img\n                                  src={this.state.bookInfo.image}\n                                  alt={`Book cover for ${this.state.bookInfo.title}`}\n                             />\n                        </div>\n                        <p>Rating: {this.state.bookInfo.rating}</p>\n                   </div>\n              </div>\n         </main>\n    );\n  }\n}\n\nexport default DisplayingData;\n\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Landing from './Landing'\nimport DisplayingData from './DisplayingData'\nimport {BrowserRouter as Router, Route } from \"react-router-dom\";\n\n\nclass App extends Component {\n\n\n  render(){\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n          <Route path=\"/data\" component={DisplayingData} />\n          <Route exact path=\"/\" component={Landing} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './App.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}