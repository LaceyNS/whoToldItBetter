{"version":3,"sources":["Landing.js","DisplayingData.js","App.js","serviceWorker.js","index.js"],"names":["Landing","className","to","Component","DisplayingData","movieCall","userQ","axios","url","method","responseType","params","api_key","query","include_adult","then","response","setState","movieArray","data","results","axiosBookCall","dataType","paramsSerializer","Qs","stringify","arrayFormat","reqUrl","key","q","xmlToJSON","res","booksResult","JSON","parse","convert","xml2json","compact","spaces","GoodreadsResponse","search","work","bookArray","catch","alert","handleFormSubmit","event","preventDefault","state","userInput","handleFormChange","target","value","handleTitleOption","movieRating","attributes","name","movieInfo","title","id","image","rating","handleTitleBookOption","bookRating","newBookRating","Math","round","bookInfo","onSubmit","this","type","onChange","placeholder","required","aria-label","slice","map","movie","onClick","data-title","data-id","data-poster","poster_path","data-rating","vote_average","aria-labelledby","undefined","book","_text","best_book","data-value","text","data-image","image_url","average_rating","src","alt","App","basename","process","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.0dc67044.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { NavLink} from \"react-router-dom\";\n\n\nclass Landing extends Component { \nrender(){\n  return(\n    <header>\n      <div className=\"hContainer \n      wrapper\">\n        <h1> Who told it better?</h1>\n        <div className=\"lineWSubtitle\">\n          <div className=\"breakLine\"></div>\n          <p>The movie or the book?</p>\n        </div>\n        <NavLink to=\"/data\" className=\"hButton\">\n          <button className=\"landingButton\">continue</button>\n        </NavLink>\n      </div>\n    </header>\n  )\n}\n\n}\n\nexport default Landing;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Qs from \"qs\";\nimport convert from 'xml-js'\nimport { number } from 'prop-types';\n\n\nclass DisplayingData extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userInput: \"\",\n      movieArray: [],\n      bookArray: [],\n      bookInfo: {},\n      movieInfo: {\n        title: \"\",\n        id: \"\",\n        image: \"no poster\",\n        rating: \"\"\n      }\n    };\n  }\n\n  // axios call to TMDB\n  movieCall = (userQ) => {\n    axios({\n      url: `https://api.themoviedb.org/3/search/movie`,\n      method: `GET`,\n      responseType: `json`,\n      params: {\n        api_key: `4f70306aa4e939e1535c12686b6403c7`,\n        query: userQ,\n        include_adult: 'false',\n      },\n    }).then((response) => {\n      this.setState({\n        movieArray: response.data.results,\n      });\n    });\n  };\n\n  // axios call to Goodreads\n  axiosBookCall = (userQ) => {\n    axios({\n      method: \"GET\",\n      url: \"https://proxy.hackeryou.com\",\n      dataType: \"json\",\n      paramsSerializer: function (params) {\n        return Qs.stringify(params, { arrayFormat: \"brackets\" });\n      },\n      params: {\n        reqUrl: `https://www.goodreads.com/search.xml`,\n        params: {\n          key: `PPD00ZRT7jL7X8jXfJmmQ`,\n          q: userQ,\n        },\n      },\n      xmlToJSON: true,\n    })\n      .then((res) => {\n        const toJson = JSON.parse(\n          convert.xml2json(res.data, { compact: true, spaces: 4 })\n        );\n        const booksResult = toJson.GoodreadsResponse.search.results.work;\n        return this.setState({\n          bookArray: booksResult,\n        });\n      })\n      .catch((res) => {\n        alert(\"No response, try again\");\n      });\n  };\n\n  // for when form submits, pass userInput through to axios\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    if (this.state.userInput !== \"\") {\n      this.movieCall(this.state.userInput);\n      this.axiosBookCall(this.state.userInput);\n    } else {\n      alert(\"try that again\")\n    }\n  };\n\n  // Grabs user input, which is then used by handleFormSubmit\n  handleFormChange = (event) => {\n    this.setState({\n      userInput: event.target.value,\n    });\n  };\n\n  handleTitleOption = (event) => {\n    let movieRating = event.target.attributes[3].value * 10\n    if (event.target.attributes[2].name === \"data-poster\") {\n      this.setState({\n        movieInfo: {\n          title: event.target.attributes[0].value,\n          id: event.target.attributes[1].value,\n          image: event.target.attributes[2].value,\n          rating: movieRating\n        }\n      })\n    } else {\n      this.setState({\n        movieInfo: {\n          title: event.target.attributes[0].value,\n          id: event.target.attributes[1].value,\n          image: \"no poster\",\n          rating: event.target.attributes[2].value * 10\n        }\n      })\n    }\n\n  };\n\n  handleTitleBookOption = (event) => {\n    let bookRating = event.target.attributes[2].value\n    let newBookRating = Math.round((bookRating * 2) * 10)\n    this.setState({\n      bookInfo: {\n        title: event.target.attributes[0].value,\n        image: event.target.attributes[1].value,\n        rating: newBookRating\n      }\n    })\n\n  }\n\n  render() {\n    return (\n      <main>\n        <div className=\"mContainer\">\n          <div className=\"mTitles\">\n            <h1>Who Told It Better</h1>\n            <div className=\"breakLine\"></div>\n          </div>\n\n        <p className=\"instructions\">\n          Did you ever wonder if the book or the movie told the\n          story better? So did we.\n        </p>\n        <p>\n          Pulling from online resources we hope to answer that\n          question here.\n        </p>\n        <p>Type in your title, and then follow the prompts.</p>\n\n        <form onSubmit={this.handleFormSubmit}>\n          <input\n            type=\"text\"\n            value={this.state.userInput}\n            onChange={this.handleFormChange}\n            placeholder=\"Title\"\n            required\n          />\n          <button\n            type=\"submit\"\n            aria-label=\"Search\"\n            className=\"mButton\">\n            Search\n          </button>\n        </form>\n\n        <div className=\"movies\">\n          <h3 id=\"movieList\">Movie List</h3> \n          {this.state.movieArray.slice([0], [5]).map((movie) => {\n            return (\n              <>\n              <button\n                key={movie.id} \n                onClick={this.handleTitleOption}\n                data-title={movie.title}\n                data-id={movie.id}\n                data-poster={movie.poster_path}\n                data-rating={movie.vote_average}\n                aria-labelledby=\"movieList\"\n                className=\"buttonChoices\">\n                  {movie.title}\n              </button>\n              </>\n            );\n          })}\n        </div>\n\n        <div className=\"books\">\n            <h3 id=\"bookList\">Book List</h3>\n          {this.state.bookArray === undefined ? (\n            <p>Sorry, no books matched!</p>\n          ) : (\n            this.state.bookArray.slice([0], [5]).map((book) => {\n              return (\n                <button\n                  key={book.id._text}\n                  onClick={this.handleTitleBookOption}\n                  data-title={book.best_book.title._text}\n                  data-value={book.best_book.title.text}\n                  data-image={book.best_book.image_url._text}\n                  data-rating={book.average_rating._text}\n                  aria-labelledby=\"bookList\"\n                  className=\"buttonChoices\">\n                    {book.best_book.title._text}\n                </button>\n              );\n            })\n            )}\n        </div>\n\n        <div className=\"moviePoster\">\n          <h2>{this.state.movieInfo.title}</h2>\n          <div className=\"imgContainer\">\n            {this.state.movieInfo.image === \"no poster\" ? (\n              <img\n                className=\"icons\"\n                src={\"./Assets/movie.png\"}\n                alt={`A cartoon style movie clapperboard.`}\n              />\n              ) : (\n                <img\n                  src={`http://image.tmdb.org/t/p/w500/${this.state.movieInfo.image}`}\n                  alt={`Movie Poster of ${this.state.movieInfo.title}`}\n                />\n              )}\n          </div>\n          {this.state.bookInfo.image ? <p>Rating: {this.state.movieInfo.rating}</p> : \"\"}\n          {this.state.movieInfo.rating > this.state.bookInfo.rating ? <p className=\"winner\">Best rated</p> : \"\" }\n        </div>\n\n        <div className=\"bookCover\">\n          <h2>{this.state.bookInfo.title}</h2>\n            <div className=\"imgContainer\">\n              {this.state.bookInfo.image === undefined || \"\" ? (\n                  <img\n                    className=\"icons\"\n                    src={\"./Assets/book.png\"}\n                    alt={`An cartoon style open book.`}\n                  />\n              ) : (\n                  <img\n                    src={this.state.bookInfo.image}\n                    alt={`Book cover for ${this.state.bookInfo.title}`}\n                  />\n              )}\n            </div>\n            {this.state.bookInfo.image ? <p>Rating: {this.state.bookInfo.rating}</p> : \"\"}\n            {this.state.movieInfo.rating < this.state.bookInfo.rating ? <p className=\"winner\"> Best rated</p> : \"\"}\n        </div>\n      </div>\n    </main>\n    );\n  }\n}\n\nexport default DisplayingData;","import React, { Component } from 'react';\nimport './App.scss';\nimport Landing from './Landing'\nimport DisplayingData from './DisplayingData'\nimport {BrowserRouter as Router, Route } from \"react-router-dom\";\n\n\nclass App extends Component {\n\n\n  render(){\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n          <Route path=\"/data\" component={DisplayingData} />\n          <Route exact path=\"/\" component={Landing} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './App.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}